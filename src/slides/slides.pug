doctype html

html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Angular Universal Rendering

  body

    article

      section
        .meetup
        <br />
        h2 Angular Universal

      section
        .avatar

      section(data-bespoke-backdrop='vienna')
        h2 Remote Web Dev <br /><br /> Vienna

      section
        h2 Angular & Drupal

      section
        h3 Github : https://github.com/joaogarin
        h3 Twitter : https://twitter.com/joaogarin
        h3 Linkedin : https://www.linkedin.com/in/joao-garin-9b118525

      section(data-bespoke-backdrop='static universal')
        h1 Universal

      section
        h1 Context

      section
        h2 Server Rendered apps

      section
        code
          pre.
            &lt;body&gt;
              <em>
              ...
              &lt;div class=&quot;page-title&quot;&gt;
                &lt;h1&gt;Rendered on the server&lt;/h1&gt;
                &lt;div&gt;
                  &lt;p&gt;Welcome home&lt;/p&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              ...
              </em>
              &lt;script src=&quot;my-app.js&quot;&gt;&lt;/script&gt;
            &lt;/body&gt;

      section
        ul.no-bullets
          li Server controls the process
          li Fetch CSS
          li Fetch some fonts
          li No javascript needed to render

      section
        h2 Single page apps

      section
        code
          pre.
            &lt;body&gt;
              <em>
              &lt;app&gt;&lt;/app&gt;
              </em>
              &lt;script src=&quot;my-app.js&quot;&gt;&lt;/script&gt;
            &lt;/body&gt;

      section
        ul.no-bullets
          li Client controls the process
          li Javascript does the rendering
          li Slower startup time
          li Snappier on page transitions after first load
          li Requests to already loaded assets dont need to be remade

      section
        h2 Taking a step back
        h3 &mdash; but... &mdash;
        h2 why?

      section
        h1 1 - Search Engine Optimization

      section
        h2 Metatags

      section
        ul.no-bullets
          li Title
          li Meta description
          li Canonical Url's
          li Content

      section
        h2 Crawlers <br /><br />care about content
      
      section
        h2 Javascript parsing
      
      section
        h2 There are solutions
        h3 &mdash; but &mdash;
        h2 not perfect

      section
        h1 2 - Social media
      
      section
        h2 Scrapers

      section(data-bespoke-backdrop='static contain social-ng1')
    
      section
        h2 Specific Protocols

      section
        h2 Twitter <br /><br />
        code
          pre.
            ...
            &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
            <em>&lt;meta name=&quot;twitter:site&quot; content=&quot;@nytimesbits&quot; /&gt;</em>
            &lt;meta name=&quot;twitter:creator&quot; content=&quot;@nickbilton&quot; /&gt;
            ...
      
      section
        h1 3 - User experience

      section
        h2 Startup time

      section
        ul.no-bullets
          li Large bundles
          li Initial loading time
          li Time to first interaction

      section
        .loading
        h3 Loading...
        
      section
        h3 &ldquo;53% of people will abandon a site if it takes <br />more than 3 sec to load&rdquo;
      
      section
        h3 &ldquo;Average time to load a website in 3G is ~19sec.&rdquo;

      section
        .angular
        <br />
        h2 Angular is fast

      section
        ul.no-bullets
          li Optimizatized for performance
          li AOT
          li Lazy loading

      section
        h3 &mdash; there is room for improvement &mdash;

      section
        h2 HTML load
        h3 &mdash; to &mdash;
        h2 Angular bootstrap

      section
        h2 Important metrics
        <br/>
        ul.no-bullets
          li Time to meaningful paint
          li Time to interactive

      section(data-bespoke-backdrop='static contain html-load')

      section
        h2 Lets talk numbers

      section(data-bespoke-backdrop='static contain angular2-todo')

      section
        h2 >4 seconds?
        h3 ouch...

      section(data-bespoke-backdrop='static contain angular2-todo-ssr')

      section
        h2 490ms
        h3 üëç 

      section
        h1 How?

      section
        h2 App that works
        h3 &mdash; on &mdash;
        h2 Server and client

      section
        h3 &mdash; Good for &mdash; <br /><br />
        ul.no-bullets
          li UX - Response from the server contains content for our users
          li SEO - crawlers can understand our page easily
          li Social Media - pages are fully shareable

      section
        h3 &mdash; introducing &mdash;
        h2 Universal rendering

      section
        h3 Universal rendering or Universal javascript is a concept<br /> or an architectural pattern that consists on using one single version <br /> of our app on multiple environments.

      section
        h3 Allows you to<br /><br />
        ul.no-bullets
          li Write your code once (one app only)
          li Run the app on the client and server (the same app)
      
      section
        h3 what we get with this is<br /> <br />
        ul.no-bullets
          li Better performance
          li SEO compliance
          li Social media / Meta information support

      section(data-bespoke-backdrop='static universal')
        h1 Angular Universal

      section
        .contributors
        <br />
        h3 bring server side rendering to Angular with the<br /> least amount of changes to the code a developer has to make.

      section(data-bespoke-backdrop='static contain angular-layers')

      section
        h2 Initial effort
        <br />
        h3 provide everything needed to have angular running on the server

      section
        h2 4.x
        h3 Universal moved to Angular core
        h3 Open source project provides several wrappers<br/> for different environments

      section
        ul.no-bullets
          li Node - Express
          li Node - Happyjs
          li .Net (in development)
          li Java (in development)
          li PHP (in development)
          
      section
        h2 Platform-server

      section
        code.long-pre
          pre.
            import { readFileSync } from 'fs';
            <em>import { renderModuleFactory } from '@angular/platform-server';</em>
            import { AppServerModuleFactory } from ‚Äò./app.server.module.ngFactory';

            <em>renderModuleFactory(AppServerModuleFactory, {</em>
              document: readFileSync('index.html', 'utf-8'),
              url: '/'
            })
            .then(html => console.log(html));

      section
        h2 Angular universal <br /><br />with node
        h3 &mdash; Express &mdash;

      section
        h2 Before
        <br/>
        h3 AppRoot module imports BrowserModule

      section
        h3 app.module.ts<br/><br/>
        code.long-pre
          pre.
            import { NgModule } from '@angular/core';
            <em>import { BrowserModule } from '@angular/platform-browser';</em>
            import { AppComponent } from './app.component';

            @NgModule({
              <em>imports: [ BrowserModule ],</em>
              declarations: [ AppComponent ],
              bootstrap: [ AppComponent ]
            })
            export class AppModule { }

      section
        h2 After
        <br/>
        h3 Two entries - Server & Browser

      section
        h2 Browser
        h3 Imports AppModule

      section
        h3 browser-app.module.ts<br/><br/>
        code.long-pre
          pre.
            import { NgModule } from '@angular/core';
            <em>import { BrowserModule } from '@angular/platform-browser';</em>
            import { AppModule } from './app.module';

            @NgModule({
              <em>bootstrap: [ AppComponent ],
                imports: [ 
                BrowserModule.withServerTransition({
                  appId: 'my-app-id'
                }),
                AppModule,
              ],</em>
            })
            export class BrowserAppModule { }

      section
        h2 Server
        h3 New NgModule - ServerModule

      section
        h3 server-app.module.ts<br/>
        code.long-pre
          pre.
            import { NgModule } from '@angular/core';
            import { BrowserModule } from '@angular/platform-browser';
            <em>import { ServerModule } from '@angular/platform-server';</em>
            import { AppModule } from './app.module';

            @NgModule({
              bootstrap: [ AppComponent ],
              imports: [ 
                BrowserModule.withServerTransition({
                  appId: 'my-app-id'
                }),
                <em>ServerModule,</em>,
                AppModule,
              ],
            })
            export class ServerAppModule { }

      section
        h2 ServerModule
        <br >
        ul.no-bullets
          li Server implementations for some modules like http, location, DOM
          li Ensure the same prefix in server and browser
          li In the future might provide ways to share state from server to client

      section
        h2 Bootstrap
        h3 Using express wrapper provided by <br/> @nguniversal/express-engine
      
      section
        code.very-long-pre
          pre.
            ...
            import * as express from 'express';
            <em>import { ServerAppModule } from './app/server-app.module';</em>
            <em>import { ngExpressEngine } from '@nguniversal/express-engine';</em>
            ...
            const app = express();
            const port = 8000;
            const baseUrl = `http://localhost:${port}`;

            <em>app.engine('html', ngExpressEngine({
              bootstrap: ServerAppModule
            }));</em>

            app.set('view engine', 'html');
            app.set('views', 'src');
            app.use('/', express.static('dist', {index: false}));
            ...
            app.listen(8000,() => {
              console.log(`Listening at ${baseUrl}`);
            });

      section
        h2 How it works

      section
        h3 "The pre-rendered page is just static HTML and CSS"

      section
        ol.no-bullets
          li Server renderes the app transforming it into a string
          li Server provides a static rendered version of that DOM
          li Client bootstraps
          li Client swaps the server rendered version with the browser version

      section
        h1 Universal gotchas

      section
        h2 DOM
        h3 <strike>Window</strike>, <strike>document</strike>, <strike>navigator</strike>

      section
        code.long-pre
          pre.
            import { PLATFORM_ID } from '@angular/core';
            import { isPlatformBrowser, isPlatformServer } from '@angular/common';
            
            constructor(@Inject(PLATFORM_ID) private platformId: Object) { ... }
            
            ngOnInit() {
              <em>if (isPlatformBrowser(this.platformId)) {
                  // Client only code.
                  ...
              }
              if (isPlatformServer(this.platformId)) {
                // Server only code.
                ...
              }</em>
            }

      section
        h2 Renderer

      section
        h3 DOM API
        code.very-long-pre
          pre.
            import { Component, ViewChild, ElementRef } from '@angular/core';

            @Component({
              selector: 'app-root',
              template: '&lt;input type=&quot;text&quot; #name&gt;'
            })
            export class AppComponent {
              @ViewChild("name") name: ElementRef;
              
              ngAfterViewInit() {
                this.name.nativeElement.setAttribute('placeholder','Name');
              }
            }

      section
        h3 Renderer API
        code.very-long-pre
          pre.
            import { Component, ViewChild, ElementRef, Renderer2 } from '@angular/core';

            @Component({
              selector: 'app-root',
              template: '&lt;input type=&quot;text&quot; #name&gt;'
            })
            export class AppComponent {
              @ViewChild("name") name: ElementRef;
              
              constructor(private renderer: Renderer2) {}

              ngAfterViewInit() {
                <em>this.renderer.setAttribute(this.name.nativeElement, 'placeholder', 'Name');</em>
              }
            }
            

      section
        h2 Set Timeout
        h3 Avoid using it, as it slows down the server response

      section
        h2 Http
        h3 By default XHR requests will be made on the server and repeated on the client.

      section
        h1 Angular CLI
        h3 Coming soon

      section
        h3 Resources
        ul.no-bullets
          li https://github.com/FrozenPandaz/ng-universal-demo
          li https://github.com/angular/universal
          li https://gitter.im/angular/universal
          
      section
        h2 Thank you!

    script(src='index.js')

    if NODE_ENV !== 'production'
      script(src='webpack-dev-server.js')
